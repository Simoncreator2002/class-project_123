#include <iostream>  // For input/output operations
#include <string>    // For string class to handle friend names

using namespace std;

class Stack {
    string* stack;  // Dynamic array to store friend names
    int top;        // Index of the top element
    int capacity;   // Fixed size of the stack

public:
    Stack() {       // Constructor with predefined size
        capacity = 5;  // Predefined stack size of 5
        stack = new string[capacity];
        top = -1;  // Stack starts empty
    }

    ~Stack() {      // Destructor to free memory
        delete[] stack;
    }

    void push(string name) {  // Add a friend to the stack
        if (top == capacity - 1) {
            cout << "Stack is full!" << endl;
        } else {
            top++;
            stack[top] = name;
            cout << name << " added." << endl;
        }
    }

    string pop() {  // Remove and return the top friend
        if (top == -1) {  // Check if stack is empty
            cout << "The stack is empty, no friend to remove." << endl;
            return "";  // Return empty string since nothing can be popped
        } else {  // If stack has elements
            string removedFriend = stack[top];  // Step 1: Get the top item
            top--;  // Step 2: Decrease top to remove it
            cout << removedFriend << " has been removed from the stack." << endl;
            return removedFriend;  // Step 3: Return the removed element
        }
    }

    void peek() {  // Show the top friend without removing
        if (top == -1) {
            cout << "Stack is empty!" << endl;
        } else {
            cout << "Top friend: " << stack[top] << endl;
        }
    }

    void display() {  // Display all friends in the stack
        if (top == -1) {
            cout << "Stack is empty!" << endl;
        } else {
            cout << "Stack: ";
            for (int i = 0; i <= top; i++) {
                cout << stack[i] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Stack friendStack;  // Create stack with predefined size
    string name;

    // Ask for four friends initially
    cout << "Input four friends:\n";
    for (int i = 0; i < 4; i++) {
        cout << "Friend #" << i + 1 << ": ";
        getline(cin, name);
        friendStack.push(name);
    }

    friendStack.display();  // Show initial stack

    int choice;
    do {
        // Display menu options
        cout << "\n1. Add friend\n2. Remove friend\n3. See top friend\n4. Show stack\n5. Exit\n";
        cout << "Choice: ";
        cin >> choice;
        cin.ignore();  // Clear newline after choice

        if (choice == 1) {
            cout << "Enter friend name: ";
            getline(cin, name);
            friendStack.push(name);
        } else if (choice == 2) {
            friendStack.pop();
        } else if (choice == 3) {
            friendStack.peek();
        } else if (choice == 4) {
            friendStack.display();
        } else if (choice == 5) {
            cout << "Goodbye!" << endl;
        } else {
            cout << "Invalid choice!" << endl;
        }
    } while (choice != 5);  // Loop until exit

    return 0;
}
